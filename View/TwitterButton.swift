//
//  TwitterButton.swift
//
//  Created on Feb 20, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

class TwitterButton: UIButton {
    
    override func draw(_ rect: CGRect) {
        super.draw(rect)
        self.drawFrame(frame: rect, resizing: .aspectFit)
    }
    
    func drawFrame(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Circle Copy
            let circleCopy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 100, height: 100), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.571, saturation: 0.621, brightness: 0.922, alpha: 1).setFill()
            circleCopy.fill()
            context.restoreGState()
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 43.66, y: 4.12))
            shape.addCurve(to: CGPoint(x: 38.52, y: 5.51), controlPoint1: CGPoint(x: 42.06, y: 4.82), controlPoint2: CGPoint(x: 40.33, y: 5.3))
            shape.addCurve(to: CGPoint(x: 42.46, y: 0.64), controlPoint1: CGPoint(x: 40.37, y: 4.42), controlPoint2: CGPoint(x: 41.79, y: 2.7))
            shape.addCurve(to: CGPoint(x: 36.77, y: 2.78), controlPoint1: CGPoint(x: 40.73, y: 1.65), controlPoint2: CGPoint(x: 38.81, y: 2.38))
            shape.addCurve(to: CGPoint(x: 30.23, y: 0), controlPoint1: CGPoint(x: 35.14, y: 1.07), controlPoint2: CGPoint(x: 32.81, y: 0))
            shape.addCurve(to: CGPoint(x: 21.27, y: 8.8), controlPoint1: CGPoint(x: 25.28, y: 0), controlPoint2: CGPoint(x: 21.27, y: 3.94))
            shape.addCurve(to: CGPoint(x: 21.5, y: 10.8), controlPoint1: CGPoint(x: 21.27, y: 9.48), controlPoint2: CGPoint(x: 21.35, y: 10.16))
            shape.addCurve(to: CGPoint(x: 3.04, y: 1.61), controlPoint1: CGPoint(x: 14.06, y: 10.43), controlPoint2: CGPoint(x: 7.46, y: 6.93))
            shape.addCurve(to: CGPoint(x: 1.83, y: 6.03), controlPoint1: CGPoint(x: 2.27, y: 2.91), controlPoint2: CGPoint(x: 1.83, y: 4.42))
            shape.addCurve(to: CGPoint(x: 5.81, y: 13.35), controlPoint1: CGPoint(x: 1.83, y: 9.08), controlPoint2: CGPoint(x: 3.41, y: 11.78))
            shape.addCurve(to: CGPoint(x: 1.75, y: 12.25), controlPoint1: CGPoint(x: 4.34, y: 13.31), controlPoint2: CGPoint(x: 2.96, y: 12.91))
            shape.addCurve(to: CGPoint(x: 1.75, y: 12.36), controlPoint1: CGPoint(x: 1.75, y: 12.29), controlPoint2: CGPoint(x: 1.75, y: 12.33))
            shape.addCurve(to: CGPoint(x: 8.94, y: 20.99), controlPoint1: CGPoint(x: 1.75, y: 16.62), controlPoint2: CGPoint(x: 4.84, y: 20.18))
            shape.addCurve(to: CGPoint(x: 6.58, y: 21.3), controlPoint1: CGPoint(x: 8.19, y: 21.19), controlPoint2: CGPoint(x: 7.4, y: 21.3))
            shape.addCurve(to: CGPoint(x: 4.89, y: 21.14), controlPoint1: CGPoint(x: 6, y: 21.3), controlPoint2: CGPoint(x: 5.44, y: 21.24))
            shape.addCurve(to: CGPoint(x: 13.26, y: 27.25), controlPoint1: CGPoint(x: 6.03, y: 24.63), controlPoint2: CGPoint(x: 9.34, y: 27.18))
            shape.addCurve(to: CGPoint(x: 2.14, y: 31.01), controlPoint1: CGPoint(x: 10.2, y: 29.61), controlPoint2: CGPoint(x: 6.33, y: 31.01))
            shape.addCurve(to: CGPoint(x: 0, y: 30.89), controlPoint1: CGPoint(x: 1.41, y: 31.01), controlPoint2: CGPoint(x: 0.7, y: 30.97))
            shape.addCurve(to: CGPoint(x: 13.73, y: 34.84), controlPoint1: CGPoint(x: 3.96, y: 33.38), controlPoint2: CGPoint(x: 8.67, y: 34.84))
            shape.addCurve(to: CGPoint(x: 39.22, y: 9.81), controlPoint1: CGPoint(x: 30.21, y: 34.84), controlPoint2: CGPoint(x: 39.22, y: 21.44))
            shape.addCurve(to: CGPoint(x: 39.19, y: 8.68), controlPoint1: CGPoint(x: 39.22, y: 9.43), controlPoint2: CGPoint(x: 39.21, y: 9.05))
            shape.addCurve(to: CGPoint(x: 43.66, y: 4.12), controlPoint1: CGPoint(x: 40.95, y: 7.44), controlPoint2: CGPoint(x: 42.46, y: 5.89))
            shape.close()
            shape.move(to: CGPoint(x: 43.66, y: 4.12))
            context.saveGState()
            context.translateBy(x: 28.75, y: 32.5)
            shape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }

    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
